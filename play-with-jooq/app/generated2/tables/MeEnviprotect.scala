/**
 * This class is generated by jOOQ
 */
package generated2.tables


import generated2.Keys
import generated2.Tour
import generated2.tables.records.MeEnviprotectRecord

import java.lang.Byte
import java.lang.Class
import java.lang.Integer
import java.lang.Short
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl


object MeEnviprotect {

	/**
	 * The reference instance of <code>tour.ME_ENVIPROTECT</code>
	 */
	val ME_ENVIPROTECT = new MeEnviprotect
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class MeEnviprotect(alias : String, aliased : Table[MeEnviprotectRecord], parameters : Array[ Field[_] ]) extends TableImpl[MeEnviprotectRecord](alias, Tour.TOUR, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[MeEnviprotectRecord] = {
		classOf[MeEnviprotectRecord]
	}

	/**
	 * The column <code>tour.ME_ENVIPROTECT.ID</code>. info:PM2.5 ID
	 */
	val ID : TableField[MeEnviprotectRecord, String] = createField("ID", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), "info:PM2.5 ID")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.AQI</code>. info:PM2.5 AQI值
	 */
	val AQI : TableField[MeEnviprotectRecord, Short] = createField("AQI", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), "info:PM2.5 AQI值")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.CITYCODE</code>. info:PM2.5 城市代码
	 */
	val CITYCODE : TableField[MeEnviprotectRecord, Integer] = createField("CITYCODE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "info:PM2.5 城市代码")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.CO</code>. info:PM2.5 一氧化碳
	 */
	val CO : TableField[MeEnviprotectRecord, Short] = createField("CO", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), "info:PM2.5 一氧化碳")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.FRESHTIME</code>. info:PM2.5 更新时间点
	 */
	val FRESHTIME : TableField[MeEnviprotectRecord, String] = createField("FRESHTIME", org.jooq.impl.SQLDataType.VARCHAR.length(5), "info:PM2.5 更新时间点")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.LEVELS</code>. info:PM2.5 污染等级
	 */
	val LEVELS : TableField[MeEnviprotectRecord, Byte] = createField("LEVELS", org.jooq.impl.SQLDataType.TINYINT.defaulted(true), "info:PM2.5 污染等级")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.NO_2</code>. info:PM2.5 二氧化氮
	 */
	val NO_2 : TableField[MeEnviprotectRecord, Short] = createField("NO_2", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), "info:PM2.5 二氧化氮")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.O3</code>. info:PM2.5 臭氧
	 */
	val O3 : TableField[MeEnviprotectRecord, Short] = createField("O3", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), "info:PM2.5 臭氧")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.PM2_5</code>. info:PM2.5 pm2.5值
	 */
	val PM2_5 : TableField[MeEnviprotectRecord, Short] = createField("PM2_5", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), "info:PM2.5 pm2.5值")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.PM_10</code>. info:PM2.5 pm10值
	 */
	val PM_10 : TableField[MeEnviprotectRecord, Short] = createField("PM_10", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), "info:PM2.5 pm10值")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.SO_2</code>. info:PM2.5 二氧化硫
	 */
	val SO_2 : TableField[MeEnviprotectRecord, Short] = createField("SO_2", org.jooq.impl.SQLDataType.SMALLINT.defaulted(true), "info:PM2.5 二氧化硫")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.TIMEPOINT</code>. info:PM2.5 更新时间段
	 */
	val TIMEPOINT : TableField[MeEnviprotectRecord, String] = createField("TIMEPOINT", org.jooq.impl.SQLDataType.VARCHAR.length(11), "info:PM2.5 更新时间段")

	/**
	 * The column <code>tour.ME_ENVIPROTECT.UPDATEDTIME</code>.
	 */
	val UPDATEDTIME : TableField[MeEnviprotectRecord, Timestamp] = createField("UPDATEDTIME", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), "")

	/**
	 * Create a <code>tour.ME_ENVIPROTECT</code> table reference
	 */
	def this() = {
		this("ME_ENVIPROTECT", null, null)
	}

	/**
	 * Create an aliased <code>tour.ME_ENVIPROTECT</code> table reference
	 */
	def this(alias : String) = {
		this(alias, generated2.tables.MeEnviprotect.ME_ENVIPROTECT, null)
	}

	private def this(alias : String, aliased : Table[MeEnviprotectRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[MeEnviprotectRecord] = {
		Keys.KEY_ME_ENVIPROTECT_PRIMARY
	}

	override def getKeys : List[ UniqueKey[MeEnviprotectRecord] ] = {
		return Arrays.asList[ UniqueKey[MeEnviprotectRecord] ](Keys.KEY_ME_ENVIPROTECT_PRIMARY)
	}

	override def as(alias : String) : MeEnviprotect = {
		new MeEnviprotect(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : MeEnviprotect = {
		new MeEnviprotect(name, null)
	}
}
