/**
 * This class is generated by jOOQ
 */
package generated2


import generated2.tables.MeEnviprotect
import generated2.tables.MeWeather
import generated2.tables.TourBus
import generated2.tables.records.MeEnviprotectRecord
import generated2.tables.records.MeWeatherRecord
import generated2.tables.records.TourBusRecord

import javax.annotation.Generated

import org.jooq.UniqueKey
import org.jooq.impl.AbstractKeys


/**
 * A class modelling foreign key relationships between tables of the <code>tour</code> 
 * schema
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
object Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	val KEY_ME_ENVIPROTECT_PRIMARY = UniqueKeys0.KEY_ME_ENVIPROTECT_PRIMARY
	val KEY_ME_WEATHER_PRIMARY = UniqueKeys0.KEY_ME_WEATHER_PRIMARY
	val KEY_TOUR_BUS_PRIMARY = UniqueKeys0.KEY_TOUR_BUS_PRIMARY

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private object UniqueKeys0 extends AbstractKeys {
		val KEY_ME_ENVIPROTECT_PRIMARY : UniqueKey[MeEnviprotectRecord] = AbstractKeys.createUniqueKey(MeEnviprotect.ME_ENVIPROTECT, MeEnviprotect.ME_ENVIPROTECT.ID)
		val KEY_ME_WEATHER_PRIMARY : UniqueKey[MeWeatherRecord] = AbstractKeys.createUniqueKey(MeWeather.ME_WEATHER, MeWeather.ME_WEATHER.ID)
		val KEY_TOUR_BUS_PRIMARY : UniqueKey[TourBusRecord] = AbstractKeys.createUniqueKey(TourBus.TOUR_BUS, TourBus.TOUR_BUS.ID)
	}
}
